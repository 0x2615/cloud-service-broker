// Code generated by counterfeiter. DO NOT EDIT.
package brokerfakes

import (
	"sync"

	"code.cloudfoundry.org/lager"
	"github.com/cloudfoundry/cloud-service-broker/brokerapi/broker"
	brokera "github.com/cloudfoundry/cloud-service-broker/pkg/broker"
)

type FakeProviderBuilder struct {
	BuildProviderStub        func(*brokera.ServiceDefinition, brokera.ServiceProviderStorage, lager.Logger) brokera.ServiceProvider
	buildProviderMutex       sync.RWMutex
	buildProviderArgsForCall []struct {
		arg1 *brokera.ServiceDefinition
		arg2 brokera.ServiceProviderStorage
		arg3 lager.Logger
	}
	buildProviderReturns struct {
		result1 brokera.ServiceProvider
	}
	buildProviderReturnsOnCall map[int]struct {
		result1 brokera.ServiceProvider
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeProviderBuilder) BuildProvider(arg1 *brokera.ServiceDefinition, arg2 brokera.ServiceProviderStorage, arg3 lager.Logger) brokera.ServiceProvider {
	fake.buildProviderMutex.Lock()
	ret, specificReturn := fake.buildProviderReturnsOnCall[len(fake.buildProviderArgsForCall)]
	fake.buildProviderArgsForCall = append(fake.buildProviderArgsForCall, struct {
		arg1 *brokera.ServiceDefinition
		arg2 brokera.ServiceProviderStorage
		arg3 lager.Logger
	}{arg1, arg2, arg3})
	stub := fake.BuildProviderStub
	fakeReturns := fake.buildProviderReturns
	fake.recordInvocation("BuildProvider", []interface{}{arg1, arg2, arg3})
	fake.buildProviderMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeProviderBuilder) BuildProviderCallCount() int {
	fake.buildProviderMutex.RLock()
	defer fake.buildProviderMutex.RUnlock()
	return len(fake.buildProviderArgsForCall)
}

func (fake *FakeProviderBuilder) BuildProviderCalls(stub func(*brokera.ServiceDefinition, brokera.ServiceProviderStorage, lager.Logger) brokera.ServiceProvider) {
	fake.buildProviderMutex.Lock()
	defer fake.buildProviderMutex.Unlock()
	fake.BuildProviderStub = stub
}

func (fake *FakeProviderBuilder) BuildProviderArgsForCall(i int) (*brokera.ServiceDefinition, brokera.ServiceProviderStorage, lager.Logger) {
	fake.buildProviderMutex.RLock()
	defer fake.buildProviderMutex.RUnlock()
	argsForCall := fake.buildProviderArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeProviderBuilder) BuildProviderReturns(result1 brokera.ServiceProvider) {
	fake.buildProviderMutex.Lock()
	defer fake.buildProviderMutex.Unlock()
	fake.BuildProviderStub = nil
	fake.buildProviderReturns = struct {
		result1 brokera.ServiceProvider
	}{result1}
}

func (fake *FakeProviderBuilder) BuildProviderReturnsOnCall(i int, result1 brokera.ServiceProvider) {
	fake.buildProviderMutex.Lock()
	defer fake.buildProviderMutex.Unlock()
	fake.BuildProviderStub = nil
	if fake.buildProviderReturnsOnCall == nil {
		fake.buildProviderReturnsOnCall = make(map[int]struct {
			result1 brokera.ServiceProvider
		})
	}
	fake.buildProviderReturnsOnCall[i] = struct {
		result1 brokera.ServiceProvider
	}{result1}
}

func (fake *FakeProviderBuilder) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.buildProviderMutex.RLock()
	defer fake.buildProviderMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeProviderBuilder) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ broker.ProviderBuilder = new(FakeProviderBuilder)
