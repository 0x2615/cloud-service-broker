// Code generated by counterfeiter. DO NOT EDIT.
package tffakes

import (
	"context"
	"sync"

	"github.com/cloudfoundry/cloud-service-broker/internal/storage"
	"github.com/cloudfoundry/cloud-service-broker/pkg/providers/tf"
	"github.com/cloudfoundry/cloud-service-broker/pkg/providers/tf/workspace"
)

type FakeLastOperationStore struct {
	MarkJobStartedStub        func(storage.TerraformDeployment, string) error
	markJobStartedMutex       sync.RWMutex
	markJobStartedArgsForCall []struct {
		arg1 storage.TerraformDeployment
		arg2 string
	}
	markJobStartedReturns struct {
		result1 error
	}
	markJobStartedReturnsOnCall map[int]struct {
		result1 error
	}
	MarkJobStartedNewStub        func(string, string) error
	markJobStartedNewMutex       sync.RWMutex
	markJobStartedNewArgsForCall []struct {
		arg1 string
		arg2 string
	}
	markJobStartedNewReturns struct {
		result1 error
	}
	markJobStartedNewReturnsOnCall map[int]struct {
		result1 error
	}
	OperationFinishedStub        func(error, workspace.Workspace, storage.TerraformDeployment) error
	operationFinishedMutex       sync.RWMutex
	operationFinishedArgsForCall []struct {
		arg1 error
		arg2 workspace.Workspace
		arg3 storage.TerraformDeployment
	}
	operationFinishedReturns struct {
		result1 error
	}
	operationFinishedReturnsOnCall map[int]struct {
		result1 error
	}
	StatusStub        func(context.Context, string) (bool, string, error)
	statusMutex       sync.RWMutex
	statusArgsForCall []struct {
		arg1 context.Context
		arg2 string
	}
	statusReturns struct {
		result1 bool
		result2 string
		result3 error
	}
	statusReturnsOnCall map[int]struct {
		result1 bool
		result2 string
		result3 error
	}
	WaitStub        func(context.Context, string) error
	waitMutex       sync.RWMutex
	waitArgsForCall []struct {
		arg1 context.Context
		arg2 string
	}
	waitReturns struct {
		result1 error
	}
	waitReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeLastOperationStore) MarkJobStarted(arg1 storage.TerraformDeployment, arg2 string) error {
	fake.markJobStartedMutex.Lock()
	ret, specificReturn := fake.markJobStartedReturnsOnCall[len(fake.markJobStartedArgsForCall)]
	fake.markJobStartedArgsForCall = append(fake.markJobStartedArgsForCall, struct {
		arg1 storage.TerraformDeployment
		arg2 string
	}{arg1, arg2})
	stub := fake.MarkJobStartedStub
	fakeReturns := fake.markJobStartedReturns
	fake.recordInvocation("MarkJobStarted", []interface{}{arg1, arg2})
	fake.markJobStartedMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeLastOperationStore) MarkJobStartedCallCount() int {
	fake.markJobStartedMutex.RLock()
	defer fake.markJobStartedMutex.RUnlock()
	return len(fake.markJobStartedArgsForCall)
}

func (fake *FakeLastOperationStore) MarkJobStartedCalls(stub func(storage.TerraformDeployment, string) error) {
	fake.markJobStartedMutex.Lock()
	defer fake.markJobStartedMutex.Unlock()
	fake.MarkJobStartedStub = stub
}

func (fake *FakeLastOperationStore) MarkJobStartedArgsForCall(i int) (storage.TerraformDeployment, string) {
	fake.markJobStartedMutex.RLock()
	defer fake.markJobStartedMutex.RUnlock()
	argsForCall := fake.markJobStartedArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeLastOperationStore) MarkJobStartedReturns(result1 error) {
	fake.markJobStartedMutex.Lock()
	defer fake.markJobStartedMutex.Unlock()
	fake.MarkJobStartedStub = nil
	fake.markJobStartedReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeLastOperationStore) MarkJobStartedReturnsOnCall(i int, result1 error) {
	fake.markJobStartedMutex.Lock()
	defer fake.markJobStartedMutex.Unlock()
	fake.MarkJobStartedStub = nil
	if fake.markJobStartedReturnsOnCall == nil {
		fake.markJobStartedReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.markJobStartedReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeLastOperationStore) MarkJobStartedNew(arg1 string, arg2 string) error {
	fake.markJobStartedNewMutex.Lock()
	ret, specificReturn := fake.markJobStartedNewReturnsOnCall[len(fake.markJobStartedNewArgsForCall)]
	fake.markJobStartedNewArgsForCall = append(fake.markJobStartedNewArgsForCall, struct {
		arg1 string
		arg2 string
	}{arg1, arg2})
	stub := fake.MarkJobStartedNewStub
	fakeReturns := fake.markJobStartedNewReturns
	fake.recordInvocation("MarkJobStartedNew", []interface{}{arg1, arg2})
	fake.markJobStartedNewMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeLastOperationStore) MarkJobStartedNewCallCount() int {
	fake.markJobStartedNewMutex.RLock()
	defer fake.markJobStartedNewMutex.RUnlock()
	return len(fake.markJobStartedNewArgsForCall)
}

func (fake *FakeLastOperationStore) MarkJobStartedNewCalls(stub func(string, string) error) {
	fake.markJobStartedNewMutex.Lock()
	defer fake.markJobStartedNewMutex.Unlock()
	fake.MarkJobStartedNewStub = stub
}

func (fake *FakeLastOperationStore) MarkJobStartedNewArgsForCall(i int) (string, string) {
	fake.markJobStartedNewMutex.RLock()
	defer fake.markJobStartedNewMutex.RUnlock()
	argsForCall := fake.markJobStartedNewArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeLastOperationStore) MarkJobStartedNewReturns(result1 error) {
	fake.markJobStartedNewMutex.Lock()
	defer fake.markJobStartedNewMutex.Unlock()
	fake.MarkJobStartedNewStub = nil
	fake.markJobStartedNewReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeLastOperationStore) MarkJobStartedNewReturnsOnCall(i int, result1 error) {
	fake.markJobStartedNewMutex.Lock()
	defer fake.markJobStartedNewMutex.Unlock()
	fake.MarkJobStartedNewStub = nil
	if fake.markJobStartedNewReturnsOnCall == nil {
		fake.markJobStartedNewReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.markJobStartedNewReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeLastOperationStore) OperationFinished(arg1 error, arg2 workspace.Workspace, arg3 storage.TerraformDeployment) error {
	fake.operationFinishedMutex.Lock()
	ret, specificReturn := fake.operationFinishedReturnsOnCall[len(fake.operationFinishedArgsForCall)]
	fake.operationFinishedArgsForCall = append(fake.operationFinishedArgsForCall, struct {
		arg1 error
		arg2 workspace.Workspace
		arg3 storage.TerraformDeployment
	}{arg1, arg2, arg3})
	stub := fake.OperationFinishedStub
	fakeReturns := fake.operationFinishedReturns
	fake.recordInvocation("OperationFinished", []interface{}{arg1, arg2, arg3})
	fake.operationFinishedMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeLastOperationStore) OperationFinishedCallCount() int {
	fake.operationFinishedMutex.RLock()
	defer fake.operationFinishedMutex.RUnlock()
	return len(fake.operationFinishedArgsForCall)
}

func (fake *FakeLastOperationStore) OperationFinishedCalls(stub func(error, workspace.Workspace, storage.TerraformDeployment) error) {
	fake.operationFinishedMutex.Lock()
	defer fake.operationFinishedMutex.Unlock()
	fake.OperationFinishedStub = stub
}

func (fake *FakeLastOperationStore) OperationFinishedArgsForCall(i int) (error, workspace.Workspace, storage.TerraformDeployment) {
	fake.operationFinishedMutex.RLock()
	defer fake.operationFinishedMutex.RUnlock()
	argsForCall := fake.operationFinishedArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeLastOperationStore) OperationFinishedReturns(result1 error) {
	fake.operationFinishedMutex.Lock()
	defer fake.operationFinishedMutex.Unlock()
	fake.OperationFinishedStub = nil
	fake.operationFinishedReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeLastOperationStore) OperationFinishedReturnsOnCall(i int, result1 error) {
	fake.operationFinishedMutex.Lock()
	defer fake.operationFinishedMutex.Unlock()
	fake.OperationFinishedStub = nil
	if fake.operationFinishedReturnsOnCall == nil {
		fake.operationFinishedReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.operationFinishedReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeLastOperationStore) Status(arg1 context.Context, arg2 string) (bool, string, error) {
	fake.statusMutex.Lock()
	ret, specificReturn := fake.statusReturnsOnCall[len(fake.statusArgsForCall)]
	fake.statusArgsForCall = append(fake.statusArgsForCall, struct {
		arg1 context.Context
		arg2 string
	}{arg1, arg2})
	stub := fake.StatusStub
	fakeReturns := fake.statusReturns
	fake.recordInvocation("Status", []interface{}{arg1, arg2})
	fake.statusMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2, ret.result3
	}
	return fakeReturns.result1, fakeReturns.result2, fakeReturns.result3
}

func (fake *FakeLastOperationStore) StatusCallCount() int {
	fake.statusMutex.RLock()
	defer fake.statusMutex.RUnlock()
	return len(fake.statusArgsForCall)
}

func (fake *FakeLastOperationStore) StatusCalls(stub func(context.Context, string) (bool, string, error)) {
	fake.statusMutex.Lock()
	defer fake.statusMutex.Unlock()
	fake.StatusStub = stub
}

func (fake *FakeLastOperationStore) StatusArgsForCall(i int) (context.Context, string) {
	fake.statusMutex.RLock()
	defer fake.statusMutex.RUnlock()
	argsForCall := fake.statusArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeLastOperationStore) StatusReturns(result1 bool, result2 string, result3 error) {
	fake.statusMutex.Lock()
	defer fake.statusMutex.Unlock()
	fake.StatusStub = nil
	fake.statusReturns = struct {
		result1 bool
		result2 string
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeLastOperationStore) StatusReturnsOnCall(i int, result1 bool, result2 string, result3 error) {
	fake.statusMutex.Lock()
	defer fake.statusMutex.Unlock()
	fake.StatusStub = nil
	if fake.statusReturnsOnCall == nil {
		fake.statusReturnsOnCall = make(map[int]struct {
			result1 bool
			result2 string
			result3 error
		})
	}
	fake.statusReturnsOnCall[i] = struct {
		result1 bool
		result2 string
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeLastOperationStore) Wait(arg1 context.Context, arg2 string) error {
	fake.waitMutex.Lock()
	ret, specificReturn := fake.waitReturnsOnCall[len(fake.waitArgsForCall)]
	fake.waitArgsForCall = append(fake.waitArgsForCall, struct {
		arg1 context.Context
		arg2 string
	}{arg1, arg2})
	stub := fake.WaitStub
	fakeReturns := fake.waitReturns
	fake.recordInvocation("Wait", []interface{}{arg1, arg2})
	fake.waitMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeLastOperationStore) WaitCallCount() int {
	fake.waitMutex.RLock()
	defer fake.waitMutex.RUnlock()
	return len(fake.waitArgsForCall)
}

func (fake *FakeLastOperationStore) WaitCalls(stub func(context.Context, string) error) {
	fake.waitMutex.Lock()
	defer fake.waitMutex.Unlock()
	fake.WaitStub = stub
}

func (fake *FakeLastOperationStore) WaitArgsForCall(i int) (context.Context, string) {
	fake.waitMutex.RLock()
	defer fake.waitMutex.RUnlock()
	argsForCall := fake.waitArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeLastOperationStore) WaitReturns(result1 error) {
	fake.waitMutex.Lock()
	defer fake.waitMutex.Unlock()
	fake.WaitStub = nil
	fake.waitReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeLastOperationStore) WaitReturnsOnCall(i int, result1 error) {
	fake.waitMutex.Lock()
	defer fake.waitMutex.Unlock()
	fake.WaitStub = nil
	if fake.waitReturnsOnCall == nil {
		fake.waitReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.waitReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeLastOperationStore) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.markJobStartedMutex.RLock()
	defer fake.markJobStartedMutex.RUnlock()
	fake.markJobStartedNewMutex.RLock()
	defer fake.markJobStartedNewMutex.RUnlock()
	fake.operationFinishedMutex.RLock()
	defer fake.operationFinishedMutex.RUnlock()
	fake.statusMutex.RLock()
	defer fake.statusMutex.RUnlock()
	fake.waitMutex.RLock()
	defer fake.waitMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeLastOperationStore) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ tf.LastOperationStore = new(FakeLastOperationStore)
