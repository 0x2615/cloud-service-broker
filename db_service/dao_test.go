// Copyright 2018 the Service Broker Project Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by go generate; DO NOT EDIT.
// This file was generated at 2018-08-21 13:20:42.218760018 -0700 PDT m=+0.010055154.

package db_service

import (
	"testing"
	"time"

  "github.com/GoogleCloudPlatform/gcp-service-broker/brokerapi/brokers/models"
	"github.com/jinzhu/gorm"
)

func newInMemoryDatastore(t *testing.T) *SqlDatastore {
	testDb, err := gorm.Open("sqlite3", ":memory:")
	if err != nil {
		t.Fatalf("Error opening test database %s", err)
	}

	testDb.CreateTable(models.ServiceInstanceDetails{})
	testDb.CreateTable(models.CloudOperation{})
	testDb.CreateTable(models.ServiceBindingCredentials{})
	testDb.CreateTable(models.ProvisionRequestDetails{})
	
	return &SqlDatastore{db: testDb}
}

func TestSqlDatastore_ServiceInstanceDetailsDAO(t *testing.T) {
	ds := newInMemoryDatastore(t)
	testPk := string(42)

	instance := models.ServiceInstanceDetails{}
	instance.ID = testPk

	// on startup, there should be no objects to find or delete
	if count, err := ds.CountServiceInstanceDetailsById(testPk); count != 0 || err != nil {
		t.Fatalf("Expected count to be 0 and error to be nil got count: %d, err: %v", count, err)
	}

	if _, err := ds.GetServiceInstanceDetailsById(testPk); err != gorm.ErrRecordNotFound {
		t.Errorf("Expected an ErrRecordNotFound trying to get non-existing PK got %v", err)
	}

	if _, err := ds.CheckDeletedServiceInstanceDetailsById(testPk); err != gorm.ErrRecordNotFound {
		t.Errorf("Expected an ErrRecordNotFound trying to check deletion status of a non-existing PK got %v", err)
	}

	if err := ds.DeleteServiceInstanceDetailsById(testPk); err != gorm.ErrRecordNotFound {
		t.Errorf("Expected an ErrRecordNotFound trying to delete non-existing PK got %v", err)
	}

	// Should be able to create the item
	beforeCreation := time.Now()
	if err := ds.CreateServiceInstanceDetails(&instance); err != nil {
		t.Errorf("Expected to be able to create the item %#v, got error: %s", instance, err)
	}
	afterCreation := time.Now()

	// after creation we should be able to get the item
	ret, err := ds.GetServiceInstanceDetailsById(testPk)
	if err != nil {
		t.Errorf("Expected no error trying to get saved item, got: %v", err)
	}

	if ret.CreatedAt.Before(beforeCreation) || ret.CreatedAt.After(afterCreation) {
		t.Errorf("Expected creation time to be between  %v and %v got %v", beforeCreation, afterCreation, ret.CreatedAt)
	}

	if !ret.UpdatedAt.Equal(ret.CreatedAt) {
		t.Errorf("Expected initial update time to equal creation time, but got update: %v, create: %v", ret.UpdatedAt, ret.CreatedAt)
	}

	// we should be able to update the item and it will have a new updated time
	if err := ds.SaveServiceInstanceDetails(ret); err != nil {
		t.Errorf("Expected no error trying to get update %#v , got: %v", ret, err)
	}

	// after deleting the item we should not be able to get it
	deleted, err := ds.CheckDeletedServiceInstanceDetailsById(testPk)
	if err != nil {
		t.Errorf("Expected no error when checking if a non-deleted thing was deleted")
	}
	if deleted {
		t.Errorf("Expected a non-deleted instance to not be marked as deleted but it was.")
	}

	if err := ds.DeleteServiceInstanceDetailsById(testPk); err != nil {
		t.Errorf("Expected no error when deleting by pk got: %v", err)
	}

	// we should be able to see that it was soft-deleted
	deleted, err = ds.CheckDeletedServiceInstanceDetailsById(testPk)
	if err != nil {
		t.Errorf("Expected no error when checking if a non-deleted thing was deleted")
	}
	if !deleted {
		t.Errorf("Expected a deleted instance to marked as deleted but it was not.")
	}

	// after deleting the item we should not be able to get it
	if _, err := ds.GetServiceInstanceDetailsById(testPk); err != gorm.ErrRecordNotFound {
		t.Errorf("Expected ErrRecordNotFound after delete but got %v", err)
	}
}

func TestSqlDatastore_CloudOperationDAO(t *testing.T) {
	ds := newInMemoryDatastore(t)
	testPk := uint(42)

	instance := models.CloudOperation{}
	instance.ID = testPk

	// on startup, there should be no objects to find or delete
	if count, err := ds.CountCloudOperationById(testPk); count != 0 || err != nil {
		t.Fatalf("Expected count to be 0 and error to be nil got count: %d, err: %v", count, err)
	}

	if _, err := ds.GetCloudOperationById(testPk); err != gorm.ErrRecordNotFound {
		t.Errorf("Expected an ErrRecordNotFound trying to get non-existing PK got %v", err)
	}

	if _, err := ds.CheckDeletedCloudOperationById(testPk); err != gorm.ErrRecordNotFound {
		t.Errorf("Expected an ErrRecordNotFound trying to check deletion status of a non-existing PK got %v", err)
	}

	if err := ds.DeleteCloudOperationById(testPk); err != gorm.ErrRecordNotFound {
		t.Errorf("Expected an ErrRecordNotFound trying to delete non-existing PK got %v", err)
	}

	// Should be able to create the item
	beforeCreation := time.Now()
	if err := ds.CreateCloudOperation(&instance); err != nil {
		t.Errorf("Expected to be able to create the item %#v, got error: %s", instance, err)
	}
	afterCreation := time.Now()

	// after creation we should be able to get the item
	ret, err := ds.GetCloudOperationById(testPk)
	if err != nil {
		t.Errorf("Expected no error trying to get saved item, got: %v", err)
	}

	if ret.CreatedAt.Before(beforeCreation) || ret.CreatedAt.After(afterCreation) {
		t.Errorf("Expected creation time to be between  %v and %v got %v", beforeCreation, afterCreation, ret.CreatedAt)
	}

	if !ret.UpdatedAt.Equal(ret.CreatedAt) {
		t.Errorf("Expected initial update time to equal creation time, but got update: %v, create: %v", ret.UpdatedAt, ret.CreatedAt)
	}

	// we should be able to update the item and it will have a new updated time
	if err := ds.SaveCloudOperation(ret); err != nil {
		t.Errorf("Expected no error trying to get update %#v , got: %v", ret, err)
	}

	// after deleting the item we should not be able to get it
	deleted, err := ds.CheckDeletedCloudOperationById(testPk)
	if err != nil {
		t.Errorf("Expected no error when checking if a non-deleted thing was deleted")
	}
	if deleted {
		t.Errorf("Expected a non-deleted instance to not be marked as deleted but it was.")
	}

	if err := ds.DeleteCloudOperationById(testPk); err != nil {
		t.Errorf("Expected no error when deleting by pk got: %v", err)
	}

	// we should be able to see that it was soft-deleted
	deleted, err = ds.CheckDeletedCloudOperationById(testPk)
	if err != nil {
		t.Errorf("Expected no error when checking if a non-deleted thing was deleted")
	}
	if !deleted {
		t.Errorf("Expected a deleted instance to marked as deleted but it was not.")
	}

	// after deleting the item we should not be able to get it
	if _, err := ds.GetCloudOperationById(testPk); err != gorm.ErrRecordNotFound {
		t.Errorf("Expected ErrRecordNotFound after delete but got %v", err)
	}
}

func TestSqlDatastore_ServiceBindingCredentialsDAO(t *testing.T) {
	ds := newInMemoryDatastore(t)
	testPk := uint(42)

	instance := models.ServiceBindingCredentials{}
	instance.ID = testPk

	// on startup, there should be no objects to find or delete
	if count, err := ds.CountServiceBindingCredentialsById(testPk); count != 0 || err != nil {
		t.Fatalf("Expected count to be 0 and error to be nil got count: %d, err: %v", count, err)
	}

	if _, err := ds.GetServiceBindingCredentialsById(testPk); err != gorm.ErrRecordNotFound {
		t.Errorf("Expected an ErrRecordNotFound trying to get non-existing PK got %v", err)
	}

	if _, err := ds.CheckDeletedServiceBindingCredentialsById(testPk); err != gorm.ErrRecordNotFound {
		t.Errorf("Expected an ErrRecordNotFound trying to check deletion status of a non-existing PK got %v", err)
	}

	if err := ds.DeleteServiceBindingCredentialsById(testPk); err != gorm.ErrRecordNotFound {
		t.Errorf("Expected an ErrRecordNotFound trying to delete non-existing PK got %v", err)
	}

	// Should be able to create the item
	beforeCreation := time.Now()
	if err := ds.CreateServiceBindingCredentials(&instance); err != nil {
		t.Errorf("Expected to be able to create the item %#v, got error: %s", instance, err)
	}
	afterCreation := time.Now()

	// after creation we should be able to get the item
	ret, err := ds.GetServiceBindingCredentialsById(testPk)
	if err != nil {
		t.Errorf("Expected no error trying to get saved item, got: %v", err)
	}

	if ret.CreatedAt.Before(beforeCreation) || ret.CreatedAt.After(afterCreation) {
		t.Errorf("Expected creation time to be between  %v and %v got %v", beforeCreation, afterCreation, ret.CreatedAt)
	}

	if !ret.UpdatedAt.Equal(ret.CreatedAt) {
		t.Errorf("Expected initial update time to equal creation time, but got update: %v, create: %v", ret.UpdatedAt, ret.CreatedAt)
	}

	// we should be able to update the item and it will have a new updated time
	if err := ds.SaveServiceBindingCredentials(ret); err != nil {
		t.Errorf("Expected no error trying to get update %#v , got: %v", ret, err)
	}

	// after deleting the item we should not be able to get it
	deleted, err := ds.CheckDeletedServiceBindingCredentialsById(testPk)
	if err != nil {
		t.Errorf("Expected no error when checking if a non-deleted thing was deleted")
	}
	if deleted {
		t.Errorf("Expected a non-deleted instance to not be marked as deleted but it was.")
	}

	if err := ds.DeleteServiceBindingCredentialsById(testPk); err != nil {
		t.Errorf("Expected no error when deleting by pk got: %v", err)
	}

	// we should be able to see that it was soft-deleted
	deleted, err = ds.CheckDeletedServiceBindingCredentialsById(testPk)
	if err != nil {
		t.Errorf("Expected no error when checking if a non-deleted thing was deleted")
	}
	if !deleted {
		t.Errorf("Expected a deleted instance to marked as deleted but it was not.")
	}

	// after deleting the item we should not be able to get it
	if _, err := ds.GetServiceBindingCredentialsById(testPk); err != gorm.ErrRecordNotFound {
		t.Errorf("Expected ErrRecordNotFound after delete but got %v", err)
	}
}

func TestSqlDatastore_ProvisionRequestDetailsDAO(t *testing.T) {
	ds := newInMemoryDatastore(t)
	testPk := uint(42)

	instance := models.ProvisionRequestDetails{}
	instance.ID = testPk

	// on startup, there should be no objects to find or delete
	if count, err := ds.CountProvisionRequestDetailsById(testPk); count != 0 || err != nil {
		t.Fatalf("Expected count to be 0 and error to be nil got count: %d, err: %v", count, err)
	}

	if _, err := ds.GetProvisionRequestDetailsById(testPk); err != gorm.ErrRecordNotFound {
		t.Errorf("Expected an ErrRecordNotFound trying to get non-existing PK got %v", err)
	}

	if _, err := ds.CheckDeletedProvisionRequestDetailsById(testPk); err != gorm.ErrRecordNotFound {
		t.Errorf("Expected an ErrRecordNotFound trying to check deletion status of a non-existing PK got %v", err)
	}

	if err := ds.DeleteProvisionRequestDetailsById(testPk); err != gorm.ErrRecordNotFound {
		t.Errorf("Expected an ErrRecordNotFound trying to delete non-existing PK got %v", err)
	}

	// Should be able to create the item
	beforeCreation := time.Now()
	if err := ds.CreateProvisionRequestDetails(&instance); err != nil {
		t.Errorf("Expected to be able to create the item %#v, got error: %s", instance, err)
	}
	afterCreation := time.Now()

	// after creation we should be able to get the item
	ret, err := ds.GetProvisionRequestDetailsById(testPk)
	if err != nil {
		t.Errorf("Expected no error trying to get saved item, got: %v", err)
	}

	if ret.CreatedAt.Before(beforeCreation) || ret.CreatedAt.After(afterCreation) {
		t.Errorf("Expected creation time to be between  %v and %v got %v", beforeCreation, afterCreation, ret.CreatedAt)
	}

	if !ret.UpdatedAt.Equal(ret.CreatedAt) {
		t.Errorf("Expected initial update time to equal creation time, but got update: %v, create: %v", ret.UpdatedAt, ret.CreatedAt)
	}

	// we should be able to update the item and it will have a new updated time
	if err := ds.SaveProvisionRequestDetails(ret); err != nil {
		t.Errorf("Expected no error trying to get update %#v , got: %v", ret, err)
	}

	// after deleting the item we should not be able to get it
	deleted, err := ds.CheckDeletedProvisionRequestDetailsById(testPk)
	if err != nil {
		t.Errorf("Expected no error when checking if a non-deleted thing was deleted")
	}
	if deleted {
		t.Errorf("Expected a non-deleted instance to not be marked as deleted but it was.")
	}

	if err := ds.DeleteProvisionRequestDetailsById(testPk); err != nil {
		t.Errorf("Expected no error when deleting by pk got: %v", err)
	}

	// we should be able to see that it was soft-deleted
	deleted, err = ds.CheckDeletedProvisionRequestDetailsById(testPk)
	if err != nil {
		t.Errorf("Expected no error when checking if a non-deleted thing was deleted")
	}
	if !deleted {
		t.Errorf("Expected a deleted instance to marked as deleted but it was not.")
	}

	// after deleting the item we should not be able to get it
	if _, err := ds.GetProvisionRequestDetailsById(testPk); err != gorm.ErrRecordNotFound {
		t.Errorf("Expected ErrRecordNotFound after delete but got %v", err)
	}
}
