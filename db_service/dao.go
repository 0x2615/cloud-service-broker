// Copyright 2018 the Service Broker Project Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by go generate; DO NOT EDIT.
// This file was generated at 2018-08-21 09:13:58.151316214 -0700 PDT m=+0.007521654.

package db_service

import (
	"github.com/pivotal-cf/brokerapi"
  "github.com/GoogleCloudPlatform/gcp-service-broker/brokerapi/brokers/models"
)

// CountServiceInstanceDetailsById gets the count of ServiceInstanceDetails by id in the datastore (0 or 1)
func CountServiceInstanceDetailsById(pk string) (int, error) { return defaultDatastore().CountServiceInstanceDetailsById(pk) }
func (ds *SqlDatastore) CountServiceInstanceDetailsById(pk string) (int, error) {
	var count int
	err := ds.db.Model(&models.ServiceInstanceDetails{}).Where("id = ?", pk).Count(&count).Error
	return count, err
}

// CreateServiceInstanceDetails creates a new record in the database and assigns it a primary key.
func CreateServiceInstanceDetails(object *models.ServiceInstanceDetails) error { return defaultDatastore().CreateServiceInstanceDetails(object) }
func (ds *SqlDatastore) CreateServiceInstanceDetails(object *models.ServiceInstanceDetails) error {
	return ds.db.Create(object).Error
}

// SaveServiceInstanceDetails updates an existing record in the database.
func SaveServiceInstanceDetails(object *models.ServiceInstanceDetails) error { return defaultDatastore().SaveServiceInstanceDetails(object) }
func (ds *SqlDatastore) SaveServiceInstanceDetails(object *models.ServiceInstanceDetails) error {
	return ds.db.Save(object).Error
}

// DeleteServiceInstanceDetailsById soft-deletes the record.
func DeleteServiceInstanceDetailsById(pk string) error { return defaultDatastore().DeleteServiceInstanceDetailsById(pk) }
func (ds *SqlDatastore) DeleteServiceInstanceDetailsById(pk string) error {
	record, err := ds.GetServiceInstanceDetailsById(pk)
	if err != nil {
		return err
	}

	return ds.DeleteServiceInstanceDetails(record)
}

// DeleteServiceInstanceDetails soft-deletes the record.
func DeleteServiceInstanceDetails(record *models.ServiceInstanceDetails) error { return defaultDatastore().DeleteServiceInstanceDetails(record) }
func (ds *SqlDatastore) DeleteServiceInstanceDetails(record *models.ServiceInstanceDetails) error {
	return ds.db.Delete(record).Error
}

// GetServiceInstanceDetailsById gets an instance of ServiceInstanceDetails by its primary key.
// If the record does not exist, brokerapi.ErrInstanceDoesNotExist is returned.
func GetServiceInstanceDetailsById(pk string) (*models.ServiceInstanceDetails, error) { return defaultDatastore().GetServiceInstanceDetailsById(pk) }
func (ds *SqlDatastore) GetServiceInstanceDetailsById(pk string) (*models.ServiceInstanceDetails, error) {
	record := models.ServiceInstanceDetails{}
	if err := ds.db.Where("id = ?", pk).First(&record).Error; err != nil {
		return nil, brokerapi.ErrInstanceDoesNotExist
	}

	return &record, nil
}


// CheckDeletedServiceInstanceDetailsById checks to see if an instance of ServiceInstanceDetails was soft deleted.
func CheckDeletedServiceInstanceDetailsById(pk string) (bool, error) { return defaultDatastore().CheckDeletedServiceInstanceDetailsById(pk) }
func (ds *SqlDatastore) CheckDeletedServiceInstanceDetailsById(pk string) (bool, error) {
	record := models.ServiceInstanceDetails{}
	if err := ds.db.Unscoped().Where("id = ?", pk).First(&record).Error; err != nil {
		return false, err
	}

	return record.DeletedAt != nil, nil
}


// CountCloudOperationById gets the count of CloudOperation by id in the datastore (0 or 1)
func CountCloudOperationById(pk uint) (int, error) { return defaultDatastore().CountCloudOperationById(pk) }
func (ds *SqlDatastore) CountCloudOperationById(pk uint) (int, error) {
	var count int
	err := ds.db.Model(&models.CloudOperation{}).Where("id = ?", pk).Count(&count).Error
	return count, err
}

// CreateCloudOperation creates a new record in the database and assigns it a primary key.
func CreateCloudOperation(object *models.CloudOperation) error { return defaultDatastore().CreateCloudOperation(object) }
func (ds *SqlDatastore) CreateCloudOperation(object *models.CloudOperation) error {
	return ds.db.Create(object).Error
}

// SaveCloudOperation updates an existing record in the database.
func SaveCloudOperation(object *models.CloudOperation) error { return defaultDatastore().SaveCloudOperation(object) }
func (ds *SqlDatastore) SaveCloudOperation(object *models.CloudOperation) error {
	return ds.db.Save(object).Error
}

// DeleteCloudOperationById soft-deletes the record.
func DeleteCloudOperationById(pk uint) error { return defaultDatastore().DeleteCloudOperationById(pk) }
func (ds *SqlDatastore) DeleteCloudOperationById(pk uint) error {
	record, err := ds.GetCloudOperationById(pk)
	if err != nil {
		return err
	}

	return ds.DeleteCloudOperation(record)
}

// DeleteCloudOperation soft-deletes the record.
func DeleteCloudOperation(record *models.CloudOperation) error { return defaultDatastore().DeleteCloudOperation(record) }
func (ds *SqlDatastore) DeleteCloudOperation(record *models.CloudOperation) error {
	return ds.db.Delete(record).Error
}

// GetCloudOperationById gets an instance of CloudOperation by its primary key.
// If the record does not exist, brokerapi.ErrInstanceDoesNotExist is returned.
func GetCloudOperationById(pk uint) (*models.CloudOperation, error) { return defaultDatastore().GetCloudOperationById(pk) }
func (ds *SqlDatastore) GetCloudOperationById(pk uint) (*models.CloudOperation, error) {
	record := models.CloudOperation{}
	if err := ds.db.Where("id = ?", pk).First(&record).Error; err != nil {
		return nil, brokerapi.ErrInstanceDoesNotExist
	}

	return &record, nil
}


// CheckDeletedCloudOperationById checks to see if an instance of CloudOperation was soft deleted.
func CheckDeletedCloudOperationById(pk uint) (bool, error) { return defaultDatastore().CheckDeletedCloudOperationById(pk) }
func (ds *SqlDatastore) CheckDeletedCloudOperationById(pk uint) (bool, error) {
	record := models.CloudOperation{}
	if err := ds.db.Unscoped().Where("id = ?", pk).First(&record).Error; err != nil {
		return false, err
	}

	return record.DeletedAt != nil, nil
}

